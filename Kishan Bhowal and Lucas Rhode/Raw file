{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ThinkingBeyond/BeyondQuantum-2025/blob/main/Lucas%20Rhode%20and%20Kishan%20Bhowal\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Install Required Libraries"
      ],
      "metadata": {
        "id": "6WmWoMs-TJsD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Install Qiskit and required dependencies\n",
        "!pip uninstall -y -q spacy thinc\n",
        "!pip install -q \"qiskit==0.46.0\" \"qiskit-aer==0.13.3\" numpy==1.26.4 matplotlib tqdm pandas\n"
      ],
      "metadata": {
        "id": "lrP3217_TG6P"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Import Libraries"
      ],
      "metadata": {
        "id": "zo1d62YRTME1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import time\n",
        "import math\n",
        "import warnings\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from tqdm.auto import tqdm\n",
        "import pandas as pd\n",
        "\n",
        "from qiskit import QuantumCircuit, transpile\n",
        "from qiskit.providers.aer import AerSimulator  # For running quantum simulations\n",
        "from qiskit.quantum_info import partial_trace, entropy  # For entropy and tracing out qubits\n",
        "from qiskit.providers.aer.library import SaveMatrixProductState  # Save MPS snapshots\n",
        "\n",
        "# ── extra gates / circuits used later ───────────────────────────────────\n",
        "from qiskit.circuit.library import QFT\n",
        "from qiskit.extensions import UnitaryGate\n",
        "\n",
        "warnings.filterwarnings(\"ignore\")  # Hide warning messages during execution\n",
        "print(\"Libraries loaded.\")\n"
      ],
      "metadata": {
        "id": "42L9ak1uTIPQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Grover's Circuit Construction"
      ],
      "metadata": {
        "id": "oNq317a2TQF6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def int2bits(i: int, n: int) -> str:\n",
        "    \"\"\"Convert integer to n-bit binary string.\"\"\"\n",
        "    return format(i, f\"0{n}b\")\n",
        "\n",
        "def grover_oracle(n: int, marked: int) -> QuantumCircuit:\n",
        "    \"\"\"Create the Grover oracle circuit for the marked item.\"\"\"\n",
        "    qc = QuantumCircuit(n, name=\"Oracle\")\n",
        "    bits = int2bits(marked, n)[::-1]   # LSBit is qubit 0\n",
        "    for q, b in enumerate(bits):\n",
        "        if b == \"0\":\n",
        "            qc.x(q)\n",
        "    if n > 0:\n",
        "        if n == 1:\n",
        "            qc.z(0)  # Special case for 1-qubit oracle\n",
        "        else:\n",
        "            qc.h(n - 1)\n",
        "            qc.mcx(list(range(n - 1)), n - 1)\n",
        "            qc.h(n - 1)\n",
        "    for q, b in enumerate(bits):\n",
        "        if b == \"0\":\n",
        "            qc.x(q)\n",
        "    return qc\n",
        "\n",
        "def diffusion_operator(n: int) -> QuantumCircuit:\n",
        "    \"\"\"Construct the diffusion operator used in Grover's search.\"\"\"\n",
        "    qc = QuantumCircuit(n, name=\"Diffusion\")\n",
        "    qc.h(range(n))\n",
        "    qc.x(range(n))\n",
        "    if n > 0:\n",
        "        if n == 1:\n",
        "            qc.z(0)  # Simple Z gate for 1-qubit case\n",
        "        else:\n",
        "            qc.h(n - 1)\n",
        "            qc.mcx(list(range(n - 1)), n - 1)\n",
        "            qc.h(n - 1)\n",
        "    qc.x(range(n))\n",
        "    qc.h(range(n))\n",
        "    return qc\n",
        "\n",
        "def build_grover_iterations(n: int, marked: int, iterations: int,\n",
        "                            save_intermediate_states: bool = False,\n",
        "                            save_final_mps: bool = False) -> QuantumCircuit:\n",
        "    \"\"\"Assemble the Grover circuit\"\"\"\n",
        "    qc = QuantumCircuit(n)\n",
        "    if n == 0:\n",
        "        return qc\n",
        "\n",
        "    qc.h(range(n))   # Begin with Hadamards\n",
        "\n",
        "    if iterations > 0:\n",
        "        oracle_gate = grover_oracle(n, marked).to_gate()\n",
        "        diffusion_gate = diffusion_operator(n).to_gate()\n",
        "\n",
        "        for k in range(iterations):\n",
        "            qc.append(oracle_gate, range(n))\n",
        "            qc.append(diffusion_gate, range(n))\n",
        "            if save_intermediate_states:\n",
        "                qc.save_statevector(label=f\"psi_{k+1}\")\n",
        "\n",
        "    if save_final_mps:\n",
        "        qc.append(SaveMatrixProductState(n, label=\"final_mps_data\"), qc.qubits)\n",
        "\n",
        "    return qc\n"
      ],
      "metadata": {
        "id": "3ihAQc73TRwX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#  Experiment Configuration"
      ],
      "metadata": {
        "id": "rDQK45hcTUem"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Define experiment parameters\n",
        "n_list = [4, 6, 8, 10, 12]    # Number of qubits to simulate\n",
        "marked_state = 0              # We'll search for the |0...0⟩ state\n",
        "cut_strategy = \"half\"         # How to cut qubits for entropy: \"half\" or \"single\"\n"
      ],
      "metadata": {
        "id": "8d59nBZtT73Q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Backend Setup"
      ],
      "metadata": {
        "id": "OfYCKbHpT80a"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Choose simulation backends\n",
        "statevec_sim = AerSimulator(method=\"statevector\")              # Full state vector\n",
        "mps_sim = AerSimulator(method=\"matrix_product_state\")          # Matrix product state (MPS)\n"
      ],
      "metadata": {
        "id": "wsIxYIzWT_Mw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Run Simulations and Collect Results"
      ],
      "metadata": {
        "id": "Xi3GlKmYT_yM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Loop through different qubit counts and simulate Grover's algorithm\n",
        "results = {\n",
        "    n: {\n",
        "        \"entropy_trace\": [],\n",
        "        \"peak_entropy\": None,\n",
        "        \"mps_time\": None,\n",
        "        \"iterations\": None,\n",
        "        \"peak_bond_dimension\": None,\n",
        "        \"theoretical_bond_dimension\": None\n",
        "    } for n in n_list\n",
        "}\n",
        "\n",
        "print(\"Starting simulations...\\n\")\n",
        "\n",
        "for n in tqdm(n_list, desc=\"Qubit sizes\"):\n",
        "    optimal_iters = int(round(math.pi / 4 * math.sqrt(2**n)))\n",
        "    if n <= 2 and optimal_iters == 0:\n",
        "        optimal_iters = 1\n",
        "\n",
        "    results[n][\"iterations\"] = optimal_iters\n",
        "\n",
        "    # ----- Statevector Simulation -----\n",
        "    ent_list = []\n",
        "    grover_entropy = build_grover_iterations(n, marked_state, optimal_iters,\n",
        "                                             save_intermediate_states=True,\n",
        "                                             save_final_mps=False)\n",
        "\n",
        "    if optimal_iters > 0 and any(not instr.operation.name.startswith(\"save_statevector\") for instr in grover_entropy.data):\n",
        "        sv_job = statevec_sim.run(transpile(grover_entropy, statevec_sim))\n",
        "        sv_result = sv_job.result()\n",
        "\n",
        "        for k in range(optimal_iters):\n",
        "            label = f\"psi_{k+1}\"\n",
        "            if label not in sv_result.data():\n",
        "                print(f\"Warning: {label} missing for n={n}\")\n",
        "                continue\n",
        "\n",
        "            state = sv_result.data()[label]\n",
        "            if cut_strategy == \"half\":\n",
        "                A = list(range(n // 2))\n",
        "            elif cut_strategy == \"single\":\n",
        "                A = [0] if n > 0 else []\n",
        "            else:\n",
        "                raise ValueError(\"cut_strategy must be 'half' or 'single'\")\n",
        "\n",
        "            if not A or len(A) == n:\n",
        "                ent = 0.0\n",
        "            else:\n",
        "                reduced = partial_trace(state, A)\n",
        "                ent = entropy(reduced, base=2)\n",
        "\n",
        "            ent_list.append(ent)\n",
        "\n",
        "    results[n][\"entropy_trace\"] = ent_list\n",
        "    results[n][\"peak_entropy\"] = max(ent_list) if ent_list else 0.0\n",
        "    results[n][\"theoretical_bond_dimension\"] = 2**results[n][\"peak_entropy\"] if results[n][\"peak_entropy\"] > 1e-9 else 1.0\n",
        "\n",
        "    # ----- MPS Simulation -----\n",
        "    grover_mps = build_grover_iterations(n, marked_state, optimal_iters,\n",
        "                                         save_intermediate_states=False,\n",
        "                                         save_final_mps=True)\n",
        "\n",
        "    has_ops = any(not instr.operation.name.startswith(\"save_matrix_product_state\") for instr in grover_mps.data)\n",
        "    has_save = any(instr.operation.name == \"save_matrix_product_state\" for instr in grover_mps.data)\n",
        "\n",
        "    if has_ops or has_save:\n",
        "        t0 = time.perf_counter()\n",
        "        job = mps_sim.run(transpile(grover_mps, mps_sim), mps_log_data=True)\n",
        "        result = job.result()\n",
        "        results[n][\"mps_time\"] = time.perf_counter() - t0\n",
        "\n",
        "        peak_bond = None\n",
        "        try:\n",
        "            data = result.data(transpile(grover_mps, mps_sim))\n",
        "            mps = data.get(\"final_mps_data\")\n",
        "\n",
        "            if isinstance(mps, tuple) and len(mps) == 2:\n",
        "                lambdas = mps[1]\n",
        "                if isinstance(lambdas, list):\n",
        "                    if n == 1:\n",
        "                        peak_bond = 1.0\n",
        "                    elif len(lambdas) == n - 1:\n",
        "                        dims = [len(vec) for vec in lambdas if isinstance(vec, (list, np.ndarray))]\n",
        "                        peak_bond = float(max(dims)) if dims else None\n",
        "\n",
        "        except Exception as e:\n",
        "            print(f\"Error parsing MPS data for n={n}: {e}\")\n",
        "\n",
        "        results[n][\"peak_bond_dimension\"] = peak_bond or results[n][\"theoretical_bond_dimension\"]\n",
        "    else:\n",
        "        results[n][\"mps_time\"] = 0.0\n",
        "        results[n][\"peak_bond_dimension\"] = results[n][\"theoretical_bond_dimension\"]\n",
        "\n",
        "print(\"\\nSimulations complete.\\n\")\n"
      ],
      "metadata": {
        "id": "tLSevVZ-UB7x"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Visualization – Entropy, Runtime, and Bond Dimension"
      ],
      "metadata": {
        "id": "rA3i5ZKiVAqG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot how entanglement evolves during Grover iterations\n",
        "plt.figure(figsize=(10, 6))\n",
        "for n_qubits in n_list:\n",
        "    trace = results[n_qubits][\"entropy_trace\"]\n",
        "    if trace:\n",
        "        xs = np.arange(1, len(trace) + 1)\n",
        "        plt.plot(xs, trace, label=f\"{n_qubits} qubits\", marker='.')\n",
        "plt.xlabel(\"Grover iteration\")\n",
        "plt.ylabel(f\"Entanglement entropy $S_{{{cut_strategy}}}$ (ebits)\")\n",
        "plt.title(\"Entanglement Growth in Grover's Algorithm\")\n",
        "plt.legend()\n",
        "plt.grid(True, linestyle='--', alpha=0.7)\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# Plot max entropy vs. number of qubits\n",
        "plt.figure(figsize=(10, 6))\n",
        "peak_ent = [results[n][\"peak_entropy\"] for n in n_list]\n",
        "plt.plot(n_list, peak_ent, marker=\"o\")\n",
        "plt.xlabel(\"Number of qubits ($N$)\")\n",
        "plt.ylabel(f\"Peak Entropy $S_{{{cut_strategy}}}^{{peak}}$ (ebits)\")\n",
        "plt.title(\"Scaling of Peak Entanglement with Qubit Count\")\n",
        "plt.grid(True, linestyle='--', alpha=0.7)\n",
        "plt.xticks(n_list)\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# MPS runtime vs. number of qubits (log scale)\n",
        "plt.figure(figsize=(10, 6))\n",
        "mps_times = [results[n][\"mps_time\"] for n in n_list]\n",
        "plt.plot(n_list, mps_times, marker=\"o\")\n",
        "plt.xlabel(\"Number of qubits ($N$)\")\n",
        "plt.ylabel(\"MPS Simulation Time (s)\")\n",
        "plt.title(\"Grover Runtime using MPS Backend\")\n",
        "plt.yscale(\"log\")\n",
        "plt.grid(True, linestyle='--', alpha=0.7)\n",
        "plt.xticks(n_list)\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "3DwHvH31VBoh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Scaling Trends and Bond Dimension"
      ],
      "metadata": {
        "id": "fOH7_s3KVC81"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Time vs. Entropy\n",
        "plt.figure(figsize=(10, 6))\n",
        "valid_n = [n for n in n_list if results[n][\"peak_entropy\"] > 1e-9]\n",
        "entropy_vals = [results[n][\"peak_entropy\"] for n in valid_n]\n",
        "time_vals = [results[n][\"mps_time\"] for n in valid_n]\n",
        "if entropy_vals and time_vals:\n",
        "    plt.plot(entropy_vals, time_vals, marker=\"o\")\n",
        "    plt.xlabel(f\"Peak Entanglement Entropy $S_{{{cut_strategy}}}^{{peak}}$\")\n",
        "    plt.ylabel(\"MPS Simulation Time (s)\")\n",
        "    plt.title(\"Runtime vs. Entanglement\")\n",
        "    plt.yscale(\"log\")\n",
        "    plt.grid(True, linestyle='--', alpha=0.7)\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "else:\n",
        "    print(\"Missing entropy data for runtime vs. entropy plot.\")\n",
        "\n",
        "# Bond dimension vs. qubits\n",
        "plt.figure(figsize=(10, 6))\n",
        "bd_vals = [results[n][\"peak_bond_dimension\"] for n in n_list if results[n][\"peak_bond_dimension\"]]\n",
        "bd_n = [n for n in n_list if results[n][\"peak_bond_dimension\"]]\n",
        "if bd_vals:\n",
        "    plt.plot(bd_n, bd_vals, marker=\"s\", color=\"green\")\n",
        "    plt.xlabel(\"Number of qubits ($N$)\")\n",
        "    plt.ylabel(\"Peak Bond Dimension ($\\\\chi_{max}$)\")\n",
        "    plt.title(\"Bond Dimension Scaling\")\n",
        "    plt.yscale(\"log\")\n",
        "    plt.grid(True, linestyle='--', alpha=0.7)\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "else:\n",
        "    print(\"No bond dimension data to plot.\")\n",
        "\n",
        "# Runtime vs. bond dimension\n",
        "plt.figure(figsize=(10, 6))\n",
        "times = []\n",
        "bds = []\n",
        "for n in n_list:\n",
        "    t = results[n][\"mps_time\"]\n",
        "    bd = results[n][\"peak_bond_dimension\"]\n",
        "    if t and bd and bd > 0:\n",
        "        times.append(t)\n",
        "        bds.append(bd)\n",
        "if times and bds:\n",
        "    sorted_bd_time = sorted(zip(bds, times))\n",
        "    sorted_bds, sorted_times = zip(*sorted_bd_time)\n",
        "    plt.plot(sorted_bds, sorted_times, marker=\"x\", color=\"purple\")\n",
        "    plt.xlabel(\"Peak Bond Dimension ($\\\\chi_{max}$)\")\n",
        "    plt.ylabel(\"MPS Simulation Time (s)\")\n",
        "    plt.title(\"Runtime vs. Bond Dimension\")\n",
        "    plt.xscale(\"log\")\n",
        "    plt.yscale(\"log\")\n",
        "    plt.grid(True, linestyle='--', alpha=0.7)\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "else:\n",
        "    print(\"Missing bond dimension or timing data.\")\n"
      ],
      "metadata": {
        "id": "zycANhPqVFBp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Entropy vs. log₂(Bond Dimension)"
      ],
      "metadata": {
        "id": "jXgy7iopVGDr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Entropy vs. log2(actual bond dimension)\n",
        "plt.figure(figsize=(10, 6))\n",
        "ent_vals = []\n",
        "actual_bd_log2 = []\n",
        "\n",
        "for n in n_list:\n",
        "    S = results[n][\"peak_entropy\"]\n",
        "    chi = results[n][\"peak_bond_dimension\"]\n",
        "    if S and chi and S > 1e-9 and chi > 0:\n",
        "        ent_vals.append(S)\n",
        "        actual_bd_log2.append(math.log2(chi))\n",
        "\n",
        "if ent_vals and actual_bd_log2:\n",
        "    plt.plot(ent_vals, actual_bd_log2, marker=\"o\", label=\"Measured $\\\\log_2 \\\\chi_{max}$\")\n",
        "    min_s = min(ent_vals)\n",
        "    max_s = max(ent_vals)\n",
        "    plt.plot([min_s, max_s], [min_s, max_s], linestyle=\"--\", color=\"gray\", label=\"$S = \\\\log_2 \\\\chi$\")\n",
        "    plt.xlabel(f\"Peak Entanglement Entropy $S_{{{cut_strategy}}}$\")\n",
        "    plt.ylabel(\"$\\\\log_2(\\\\chi_{max})$\")\n",
        "    plt.title(\"Entropy vs. Bond Dimension (Log-Scale)\")\n",
        "    plt.legend()\n",
        "    plt.grid(True, linestyle='--', alpha=0.7)\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "else:\n",
        "    print(\"Not enough valid entropy/bond dimension pairs for plot.\")\n"
      ],
      "metadata": {
        "id": "0k54WIhZVJIw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Inspect Raw Results"
      ],
      "metadata": {
        "id": "pUvMLgJWf2Px"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Summary table + background notes\n",
        "import pandas as pd\n",
        "from math import pow\n",
        "\n",
        "summary_rows = []\n",
        "for n in n_list:\n",
        "    S_peak  = results[n].get(\"peak_entropy\")\n",
        "    chi_actual = None # Initialize chi_actual to None or some default\n",
        "    if \"peak_bond_dimension\" in results[n] and results[n][\"peak_bond_dimension\"] is not None:\n",
        "        chi_actual = results[n][\"peak_bond_dimension\"]\n",
        "    chi_theory = None if S_peak is None else pow(2, S_peak)\n",
        "\n",
        "    summary_rows.append({\n",
        "        \"n_qubits\":            n,\n",
        "        \"iterations\":          results[n][\"iterations\"],\n",
        "        \"S_max  (ebits)\":      f\"{S_peak:.4f}\" if S_peak is not None else \"N/A\",\n",
        "        \"χ_max  (actual)\":     f\"{chi_actual:.1f}\" if chi_actual is not None else \"N/A\",\n",
        "        \"χ_max  theory (2^S)\": f\"{chi_theory:.1f}\" if chi_theory is not None else \"N/A\",\n",
        "        \"MPS time  (s)\":       f\"{results[n]['mps_time']:.4f}\" if results[n]['mps_time'] is not None else \"N/A\",\n",
        "    })\n",
        "\n",
        "summary_df = pd.DataFrame(summary_rows)\n",
        "print(\"\\n--- Summary Table ---\")\n",
        "print(summary_df.to_string(index=False))\n",
        "\n",
        "# ── Extra context ─────────────────────\n",
        "print(\"\\n\\n--- Theoretical Background for MPS Cost ---\")\n",
        "print(\"The classical simulation cost of an MPS scales with the *maximum* \"\n",
        "      \"bond dimension χ_max encountered during the circuit evolution.\")\n",
        "print(\"For a 1-D chain, χ_max is lower-bounded by 2^S_max, where S_max is the \"\n",
        "      \"largest bipartite entanglement entropy (in ebits) across any cut.\")\n",
        "print(\"Thus, a crude cost model is  T ∼ poly(N) · χ_max^k  (k ≈ 2–3 for typical \"\n",
        "      \"dense-gate circuits).  Substituting χ_max ≳ 2^S_max gives\\n\"\n",
        "      \"      T ∼ poly(N) · 2^{k · S_max}.\")\n",
        "\n",
        "if cut_strategy == \"single\":\n",
        "    print(\"\\nNote: With the 'single'-qubit cut the measured entropy can \"\n",
        "          \"underestimate the true χ_max that limits bulk MPS simulations. \"\n",
        "          \"The 'half'-cut is usually the more diagnostic choice.\")\n",
        "\n",
        "print(\"\\n--- Notes on χ_max extraction ---\")\n",
        "print(\"χ_max (actual) is taken directly from Qiskit Aer's \"\n",
        "      \"`save_matrix_product_state` snapshot.  If you ever see 'N/A', \"\n",
        "      \"inspect `snapshot.keys()` to adapt the parsing logic to a future \"\n",
        "      \"Aer version.\")\n"
      ],
      "metadata": {
        "id": "LnLF7mqLf4_t"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Input Validation"
      ],
      "metadata": {
        "id": "Tdiok1wIVzsJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Check that the bitstring only contains 0s and 1s\n",
        "def _validate_bitstring(secret: str, param_name: str = \"secret\") -> None:\n",
        "    if not secret or any(b not in \"01\" for b in secret):\n",
        "        raise ValueError(f\"{param_name} must be a non-empty string of 0s and 1s.\")\n"
      ],
      "metadata": {
        "id": "GrcxIP5wV2GN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Bernstein–Vazirani Circuit"
      ],
      "metadata": {
        "id": "ME5GWk9XV3Gb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Create the Bernstein–Vazirani oracle for a given secret bitstring\n",
        "def bernstein_vazirani_circuit(secret: str) -> QuantumCircuit:\n",
        "    _validate_bitstring(secret)\n",
        "    n = len(secret)\n",
        "    qc = QuantumCircuit(n + 1, name=f\"BV_{n}\")\n",
        "\n",
        "    aux = n\n",
        "    qc.x(aux)\n",
        "    qc.h(aux)\n",
        "\n",
        "    qc.h(range(n))\n",
        "    for i, bit in enumerate(reversed(secret)):  # bitstring is LSB -> qubit 0\n",
        "        if bit == \"1\":\n",
        "            qc.cx(i, aux)\n",
        "\n",
        "    qc.h(range(n))\n",
        "    qc.barrier(label=\"BV done\")\n",
        "    return qc\n"
      ],
      "metadata": {
        "id": "N9BkgqXdV6E-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Deutsch–Jozsa Circuit"
      ],
      "metadata": {
        "id": "g0G82DKyV7LP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Build the Deutsch–Jozsa circuit with selectable built-in oracles\n",
        "def deutsch_jozsa_circuit(n: int, oracle: str = \"balanced_parity\") -> QuantumCircuit:\n",
        "    if n < 1:\n",
        "        raise ValueError(\"Need at least one input qubit for Deutsch–Jozsa.\")\n",
        "\n",
        "    supported_oracles = {\n",
        "        \"constant_zero\",\n",
        "        \"constant_one\",\n",
        "        \"balanced_first_bit\",\n",
        "        \"balanced_parity\"\n",
        "    }\n",
        "    if oracle not in supported_oracles:\n",
        "        raise ValueError(f\"Unknown oracle type: {oracle}\")\n",
        "\n",
        "    qc = QuantumCircuit(n + 1, name=f\"DJ_{oracle}_n{n}\")\n",
        "    aux = n\n",
        "\n",
        "    qc.x(aux)\n",
        "    qc.h(aux)\n",
        "    qc.h(range(n))\n",
        "\n",
        "    # Apply oracle based on the selected type\n",
        "    if oracle == \"constant_one\":\n",
        "        qc.x(aux)\n",
        "    elif oracle == \"balanced_first_bit\":\n",
        "        qc.cx(0, aux)\n",
        "    elif oracle == \"balanced_parity\":\n",
        "        for i in range(n):\n",
        "            qc.cx(i, aux)\n",
        "\n",
        "    qc.h(range(n))\n",
        "    qc.barrier(label=\"DJ done\")\n",
        "    return qc\n"
      ],
      "metadata": {
        "id": "OPdWBsYfV9U-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# QFT and iQFT Circuits"
      ],
      "metadata": {
        "id": "X7wlyxiZYgQA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def qft_circuit(n: int, do_swaps: bool = True) -> QuantumCircuit:\n",
        "    \"\"\"Forward Quantum Fourier Transform (QFT) on n qubits.\"\"\"\n",
        "    if n < 0:\n",
        "        raise ValueError(\"Number of qubits must be non-negative.\")\n",
        "    return QFT(n, do_swaps=do_swaps).decompose()\n",
        "\n",
        "def iqft_circuit(n: int, do_swaps: bool = True) -> QuantumCircuit:\n",
        "    \"\"\"Inverse QFT (used in Phase Estimation).\"\"\"\n",
        "    return QFT(n, do_swaps=do_swaps, inverse=True).decompose()\n"
      ],
      "metadata": {
        "id": "USwU8hDuYhsH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Phase Estimation Circuit\n"
      ],
      "metadata": {
        "id": "Cfjc_JGJYikm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def phase_estimation_circuit(n_count: int, unitary: QuantumCircuit, eigen_prep: QuantumCircuit | None = None) -> QuantumCircuit:\n",
        "    \"\"\"Construct the standard textbook QPE circuit with controlled-U^{2^k}.\"\"\"\n",
        "    if n_count < 1:\n",
        "        raise ValueError(\"Must have at least one counting qubit.\")\n",
        "\n",
        "    m = unitary.num_qubits\n",
        "    total = n_count + m\n",
        "    qc = QuantumCircuit(total, name=f\"QPE_{n_count}_{m}\")\n",
        "    count = range(n_count)\n",
        "    target = range(n_count, total)\n",
        "\n",
        "    if eigen_prep:\n",
        "        if eigen_prep.num_qubits != m:\n",
        "            raise ValueError(\"Mismatch in number of qubits for eigenstate prep.\")\n",
        "        qc.compose(eigen_prep, target, inplace=True)\n",
        "\n",
        "    qc.h(count)\n",
        "    base_gate = UnitaryGate(unitary.to_matrix(), label=\"U\")\n",
        "    for k in range(n_count):\n",
        "        qc.append(base_gate.power(1 << k).control(), [count[k], *target])\n",
        "\n",
        "    qc.append(iqft_circuit(n_count), count)\n",
        "    qc.barrier(label=\"QPE done\")\n",
        "    return qc\n"
      ],
      "metadata": {
        "id": "YfC92tLhYlkx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# QAOA for Max-Cut"
      ],
      "metadata": {
        "id": "bNW3ZW0fYnHc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from typing import Sequence, Tuple\n",
        "\n",
        "def qaoa_maxcut_circuit(\n",
        "    edges: Sequence[Tuple[int, int]],\n",
        "    p: int,\n",
        "    gammas: Sequence[float],\n",
        "    betas: Sequence[float],\n",
        ") -> QuantumCircuit:\n",
        "    \"\"\"QAOA-p for Max-Cut on an undirected graph.\"\"\"\n",
        "    if p < 1:\n",
        "        raise ValueError(\"p must be at least 1.\")\n",
        "    if len(gammas) != p or len(betas) != p:\n",
        "        raise ValueError(\"gammas and betas must be length-p sequences.\")\n",
        "\n",
        "    n = max((max(u, v) for u, v in edges), default=-1) + 1\n",
        "    qc = QuantumCircuit(n, name=f\"QAOA_MaxCut_n{n}_p{p}\")\n",
        "\n",
        "    qc.h(range(n))\n",
        "    for k in range(p):\n",
        "        # cost Hamiltonian\n",
        "        for u, v in edges:\n",
        "            qc.rzz(2 * gammas[k], u, v)\n",
        "        # mixer\n",
        "        qc.rx(2 * betas[k], range(n))\n",
        "\n",
        "    qc.barrier(label=\"QAOA done\")\n",
        "    return qc\n"
      ],
      "metadata": {
        "id": "B9xT_pJvYqv7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Ising Model Trotterization"
      ],
      "metadata": {
        "id": "B3bgoQFCYroL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def trotter_ising_circuit(n: int, J: float, h: float, t: float, steps: int, init: str = \"+\") -> QuantumCircuit:\n",
        "    \"\"\"Trotterized simulation of Ising model with open boundaries.\"\"\"\n",
        "    if n < 1:\n",
        "        raise ValueError(\"Need at least one spin.\")\n",
        "    if steps < 1:\n",
        "        raise ValueError(\"Number of Trotter steps must be ≥1.\")\n",
        "    if init not in {\"0\", \"+\"}:\n",
        "        raise ValueError(\"Initial state must be '0' or '+'.\")\n",
        "\n",
        "    dt = t / steps\n",
        "    qc = QuantumCircuit(n, name=f\"Ising_n{n}_t{t}_s{steps}\")\n",
        "\n",
        "    if init == \"+\":\n",
        "        qc.h(range(n))\n",
        "\n",
        "    for _ in range(steps):\n",
        "        for i in range(n - 1):\n",
        "            qc.cx(i, i + 1)\n",
        "            qc.rz(-2 * J * dt, i + 1)\n",
        "            qc.cx(i, i + 1)\n",
        "        qc.rx(-2 * h * dt, range(n))\n",
        "\n",
        "    qc.barrier(label=\"Ising done\")\n",
        "    return qc\n",
        "\n",
        "print(\"Extra algorithms loaded: BV, DJ, QFT, QPE, QAOA, Ising\")\n"
      ],
      "metadata": {
        "id": "Ohus3I4EYtib"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Benchmarking and Visualization"
      ],
      "metadata": {
        "id": "G6BXsBiiYvrc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import math, time, functools, numpy as np\n",
        "import pandas as pd, matplotlib.pyplot as plt\n",
        "from typing import Dict, Callable, Tuple, List, Union\n",
        "from qiskit import QuantumCircuit, transpile\n",
        "from qiskit_aer import AerSimulator\n",
        "from qiskit.circuit.library import PhaseEstimation\n",
        "\n",
        "def half_cut_entropy(snapshot: Union[Dict[str, List[np.ndarray]], Tuple[List, List[np.ndarray]], List[np.ndarray]]) -> Tuple[float, int]:\n",
        "    singular_value_arrays: List[np.ndarray]\n",
        "\n",
        "    if isinstance(snapshot, dict):\n",
        "        singular_value_arrays = snapshot.get(\"lambda\", [])\n",
        "        if not singular_value_arrays and \"final_mps\" in snapshot and isinstance(snapshot[\"final_mps\"], tuple) and len(snapshot[\"final_mps\"]) == 2:\n",
        "             singular_value_arrays = snapshot[\"final_mps\"][1]\n",
        "        elif not singular_value_arrays and \"MPS\" in snapshot and isinstance(snapshot[\"MPS\"], tuple) and len(snapshot[\"MPS\"]) == 2:\n",
        "             singular_value_arrays = snapshot[\"MPS\"][1]\n",
        "    elif isinstance(snapshot, tuple) and len(snapshot) == 2:\n",
        "        singular_value_arrays = snapshot[1]\n",
        "    elif isinstance(snapshot, list):\n",
        "        # If the snapshot is directly the list_of_lambda_data\n",
        "        singular_value_arrays = snapshot\n",
        "    else:\n",
        "        return 0.0, 1\n",
        "\n",
        "    if not singular_value_arrays:\n",
        "        return 0.0, 1\n",
        "\n",
        "    # Calculate chi_max: the maximum bond dimension across all cuts\n",
        "    # Each element in singular_value_arrays is a 1D numpy array of singular values for a bond.\n",
        "    # The length of this array is the bond dimension for that cut.\n",
        "    chi_max_candidates = [len(s_values) for s_values in singular_value_arrays if isinstance(s_values, np.ndarray) and s_values.size > 0]\n",
        "\n",
        "    if not chi_max_candidates:\n",
        "        # This implies no bonds had singular values, or arrays were empty.\n",
        "        # For N >= 2, this should mean a product state where chi=1 for all bonds.\n",
        "        chi_max = 1\n",
        "    else:\n",
        "        chi_max = max(chi_max_candidates)\n",
        "        # A bond dimension cannot be 0 for N > 1 if connections exist.\n",
        "        # If max length was 0 (e.g. all arrays empty, which is odd), default to 1.\n",
        "        if chi_max == 0:\n",
        "             chi_max = 1\n",
        "\n",
        "    # Select singular values for the middle cut\n",
        "    # For N qubits, there are N-1 bonds.\n",
        "    middle_cut_index = len(singular_value_arrays) // 2\n",
        "\n",
        "    # Ensure the index is valid (it should be if singular_value_arrays is not empty)\n",
        "    if not (0 <= middle_cut_index < len(singular_value_arrays)):\n",
        "        # This indicates an issue with the structure of singular_value_arrays\n",
        "        return 0.0, int(chi_max)\n",
        "\n",
        "    schmidt_coeffs = np.array(singular_value_arrays[middle_cut_index])\n",
        "\n",
        "    if schmidt_coeffs.size == 0:\n",
        "        # Middle bond has dimension 0\n",
        "        return 0.0, int(chi_max)\n",
        "\n",
        "    # Probabilities are the squares of the Schmidt coefficients (singular values)\n",
        "    # These lambda_i are such that sum(lambda_i^2) = 1\n",
        "    probabilities = schmidt_coeffs**2\n",
        "\n",
        "    # Calculate entanglement entropy: S = -sum(p_i * log2(p_i))\n",
        "    # Filter out p_i = 0 to avoid log2(0) issues leading to NaN (0 * -inf)\n",
        "    with np.errstate(divide='ignore', invalid='ignore'):\n",
        "        # Create a boolean mask for probabilities greater than a small epsilon\n",
        "        valid_mask = probabilities > 1e-15\n",
        "        valid_probabilities = probabilities[valid_mask]\n",
        "\n",
        "        if valid_probabilities.size == 0:\n",
        "            S = 0.0\n",
        "        else:\n",
        "            # Calculate entropy only for non-zero probabilities\n",
        "            S = -np.sum(valid_probabilities * np.log2(valid_probabilities))\n",
        "\n",
        "    return S, int(chi_max)\n",
        "\n",
        "def _grover_factory(n: int) -> QuantumCircuit:\n",
        "    r = max(1, round((math.pi / 4) * math.sqrt(2 ** n)))\n",
        "    qc = QuantumCircuit(n)\n",
        "    qc.h(range(n))\n",
        "    for _ in range(r):\n",
        "        qc.h(n - 1)\n",
        "        qc.mcx(list(range(n - 1)), n - 1)\n",
        "        qc.h(n - 1)\n",
        "        qc.h(range(n)); qc.x(range(n))\n",
        "        qc.h(n - 1); qc.mcx(list(range(n - 1)), n - 1); qc.h(n - 1)\n",
        "        qc.x(range(n)); qc.h(range(n))\n",
        "    qc.barrier(label=\"Grover done\")\n",
        "    return qc\n",
        "\n",
        "def _phase_est_factory(_: int) -> QuantumCircuit:\n",
        "    theta = np.pi / 3\n",
        "    u = QuantumCircuit(1)\n",
        "    u.rz(2 * theta, 0)\n",
        "    pe = PhaseEstimation(4, u)\n",
        "    qc = QuantumCircuit(5)\n",
        "    qc.compose(pe, qc.qubits, inplace=True)\n",
        "    qc.barrier(label=\"QPE done\")\n",
        "    return qc\n",
        "\n",
        "FACTORIES: Dict[str, Callable[[int], QuantumCircuit]] = {\n",
        "    \"grover\": _grover_factory,\n",
        "    \"bernstein_vazirani\": lambda n: bernstein_vazirani_circuit(\"1\" * n),\n",
        "    \"deutsch_jozsa\": functools.partial(deutsch_jozsa_circuit, oracle=\"balanced_parity\"),\n",
        "    \"qft\": qft_circuit,\n",
        "    \"phase_est\": _phase_est_factory,\n",
        "    \"qaoa\": lambda n: qaoa_maxcut_circuit([(i, (i + 1) % n) for i in range(n)], 1, [0.8], [0.7]),\n",
        "    \"ising_trotter\": lambda n: trotter_ising_circuit(n, 1.0, 1.0, 2.0, 5),\n",
        "}\n",
        "\n",
        "BACKEND = AerSimulator(method=\"matrix_product_state\")\n",
        "\n",
        "def run_once(tag: str, n: int):\n",
        "    qc = FACTORIES[tag](n)\n",
        "    qc.save_matrix_product_state(label=\"final_mps\")\n",
        "    t0 = time.perf_counter()\n",
        "    res = BACKEND.run(transpile(qc, BACKEND)).result()\n",
        "    wall = time.perf_counter() - t0\n",
        "    S, chi = half_cut_entropy(res.data(0)[\"final_mps\"])\n",
        "    return dict(alg=tag, N=n, runtime=wall, S_peak=S, chi_max=chi)\n",
        "\n",
        "N_LIST, rows = [4, 6, 8, 10, 12], []\n",
        "for alg in FACTORIES:\n",
        "    print(f\"\\n▶ {alg}\")\n",
        "    for N in N_LIST:\n",
        "        r = run_once(alg, N)\n",
        "        print(f\"  N={N:2d}  χ={r['chi_max']:<2d}  S={r['S_peak']:.3f}  t={r['runtime']:.3g}s\")\n",
        "        rows.append(r)\n",
        "\n",
        "df = pd.DataFrame(rows)\n",
        "display(df)\n",
        "df.to_csv(\"entanglement_benchmark_results.csv\", index=False)\n",
        "\n",
        "fig, axs = plt.subplots(1, 3, figsize=(15, 4))\n",
        "for alg, grp in df.groupby(\"alg\"):\n",
        "    axs[0].plot(grp.N, grp.S_peak, \"o-\", label=alg)\n",
        "    axs[1].plot(grp.N, grp.runtime, \"o-\", label=alg)\n",
        "    axs[2].plot(grp.chi_max, grp.runtime, \"o\", label=alg)\n",
        "\n",
        "axs[0].set(title=\"Peak half-cut entropy vs N\", xlabel=\"qubits N\", ylabel=\"S_peak (ebits)\")\n",
        "axs[1].set(title=\"Simulation time vs N\", xlabel=\"qubits N\", ylabel=\"time (s)\")\n",
        "axs[2].set(title=\"Time vs χ_max\", xlabel=\"χ_max\", ylabel=\"time (s)\")\n",
        "for ax in axs:\n",
        "    ax.grid(True)\n",
        "axs[0].legend(fontsize=8, ncol=2, loc=\"upper left\")\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "itXiqHnCYw12"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
