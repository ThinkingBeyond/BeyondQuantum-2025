# -*- coding: utf-8 -*-
"""Decoherence_measurement

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13K7E4xprAxFyg0Ufl3VlDSDSZEGLl09l
"""

from qiskit import QuantumCircuit, transpile
from qiskit_aer import Aer
from qiskit.quantum_info import DensityMatrix, partial_trace, purity
from qiskit_aer.noise import NoiseModel, thermal_relaxation_error
from qiskit_aer import AerSimulator
import numpy as np
import matplotlib.pyplot as plt

# Parameters
num_steps = 100
t_max = 10
times = np.linspace(0, t_max, num_steps)
gamma = 0.05  # dephasing rate (higher => stronger weak measurement)

# Function to apply weak dephasing manually
def apply_dephasing(rho, gamma):
    # Dephasing Kraus operators
    E0 = np.sqrt(1 - gamma) * np.eye(2)
    E1 = np.sqrt(gamma) * np.array([[1, 0], [0, -1]])
    # Apply channel: E0 * rho * E0† + E1 * rho * E1†
    return E0 @ rho @ E0.conj().T + E1 @ rho @ E1.conj().T

# Initial pure superposition state (|+⟩ state)
qc = QuantumCircuit(1)
qc.h(0)
backend = Aer.get_backend('aer_simulator')
qc.save_density_matrix()
result = backend.run(transpile(qc, backend)).result()
rho = result.data(0)['density_matrix']
rho = np.array(rho)

# Simulate evolution with repeated weak measurement
purities = [purity(DensityMatrix(rho))]
for _ in range(num_steps - 1):
    rho = apply_dephasing(rho, gamma)
    purities.append(purity(DensityMatrix(rho)))

# Plot Purity vs Time
plt.figure(figsize=(8, 5))
plt.plot(times, purities, label='Purity under weak measurement')
plt.xlabel("Time")
plt.ylabel("Purity")
plt.title("Purity vs Time (Simulated Weak Measurement via Dephasing)")
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()

pip install qiskit-aer