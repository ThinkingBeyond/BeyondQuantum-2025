# -*- coding: utf-8 -*-
"""Jashn and jamie

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tV4iN7nmH380Jp2jfHMzg7MRC2wfYmN3
"""

pip install aer_simulator



from qiskit import QuantumCircuit
from qiskit.quantum_info import DensityMatrix, purity
from qiskit_aer.noise import NoiseModel, thermal_relaxation_error
from qiskit_aer import AerSimulator
import matplotlib.pyplot as plt
import numpy as np

# Parameters
T1 = 100       # Amplitude damping (irrelevant in this case)
T2 = 5         # Dephasing time (lower = more decoherence)
dt = 0.1       # Time step
timesteps = 100

# Noise model
noise_model = NoiseModel()
error = thermal_relaxation_error(T1, T2, dt)
noise_model.add_all_qubit_quantum_error(error, ['id'])

# Backend
backend = AerSimulator(method='density_matrix')

# List to store purity values
purities = []

# Initial state preparation (Hadamard gate to make superposition)
prep_circuit = QuantumCircuit(1)
prep_circuit.h(0)
prep_circuit.save_density_matrix()

# Run initial state to get rho_0
result = backend.run(prep_circuit).result()
data = result.data(0)  # <-- This is crucial: you must CALL .data(0)
rho = DensityMatrix(data['density_matrix'])
purities.append(purity(rho))

# Apply decoherence over time
circuit = QuantumCircuit(1)
for _ in range(timesteps):
    circuit.id(0)
    full_circuit = prep_circuit.compose(circuit)
    full_circuit.save_density_matrix()
    result = backend.run(full_circuit, noise_model=noise_model).result()
    data = result.data(0)
    rho = DensityMatrix(data['density_matrix'])
    purities.append(purity(rho))

# Plot purity over time
plt.plot(np.arange(timesteps + 1) * dt, purities)
plt.xlabel('Time')
plt.ylabel('Purity Tr(ρ²)')
plt.title('Purity Decay from Decoherence')
plt.grid(True)
plt.show()

pip install qiskit qiskit-aer matplotlib

